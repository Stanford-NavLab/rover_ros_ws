// Generated by gencpp from file planner/NominalTrajectory.msg
// DO NOT EDIT!


#ifndef PLANNER_MESSAGE_NOMINALTRAJECTORY_H
#define PLANNER_MESSAGE_NOMINALTRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <planner/State.h>
#include <planner/Control.h>

namespace planner
{
template <class ContainerAllocator>
struct NominalTrajectory_
{
  typedef NominalTrajectory_<ContainerAllocator> Type;

  NominalTrajectory_()
    : states()
    , controls()  {
    }
  NominalTrajectory_(const ContainerAllocator& _alloc)
    : states(_alloc)
    , controls(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::planner::State_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planner::State_<ContainerAllocator> >::other >  _states_type;
  _states_type states;

   typedef std::vector< ::planner::Control_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::planner::Control_<ContainerAllocator> >::other >  _controls_type;
  _controls_type controls;





  typedef boost::shared_ptr< ::planner::NominalTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner::NominalTrajectory_<ContainerAllocator> const> ConstPtr;

}; // struct NominalTrajectory_

typedef ::planner::NominalTrajectory_<std::allocator<void> > NominalTrajectory;

typedef boost::shared_ptr< ::planner::NominalTrajectory > NominalTrajectoryPtr;
typedef boost::shared_ptr< ::planner::NominalTrajectory const> NominalTrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner::NominalTrajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner::NominalTrajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner::NominalTrajectory_<ContainerAllocator1> & lhs, const ::planner::NominalTrajectory_<ContainerAllocator2> & rhs)
{
  return lhs.states == rhs.states &&
    lhs.controls == rhs.controls;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner::NominalTrajectory_<ContainerAllocator1> & lhs, const ::planner::NominalTrajectory_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner::NominalTrajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner::NominalTrajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::NominalTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner::NominalTrajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::NominalTrajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner::NominalTrajectory_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner::NominalTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8aa3d7b09e7dbafc476534ce12baadb2";
  }

  static const char* value(const ::planner::NominalTrajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8aa3d7b09e7dbafcULL;
  static const uint64_t static_value2 = 0x476534ce12baadb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner::NominalTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner/NominalTrajectory";
  }

  static const char* value(const ::planner::NominalTrajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner::NominalTrajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "State[] states\n"
"Control[] controls\n"
"================================================================================\n"
"MSG: planner/State\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 v\n"
"================================================================================\n"
"MSG: planner/Control\n"
"float64 omega\n"
"float64 a\n"
;
  }

  static const char* value(const ::planner::NominalTrajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner::NominalTrajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.states);
      stream.next(m.controls);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NominalTrajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner::NominalTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner::NominalTrajectory_<ContainerAllocator>& v)
  {
    s << indent << "states[]" << std::endl;
    for (size_t i = 0; i < v.states.size(); ++i)
    {
      s << indent << "  states[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::State_<ContainerAllocator> >::stream(s, indent + "    ", v.states[i]);
    }
    s << indent << "controls[]" << std::endl;
    for (size_t i = 0; i < v.controls.size(); ++i)
    {
      s << indent << "  controls[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::planner::Control_<ContainerAllocator> >::stream(s, indent + "    ", v.controls[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MESSAGE_NOMINALTRAJECTORY_H
